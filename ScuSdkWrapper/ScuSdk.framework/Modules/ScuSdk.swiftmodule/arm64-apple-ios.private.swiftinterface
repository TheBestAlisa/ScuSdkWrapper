// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ScuSdk
import CommonCrypto
import CoreBluetooth
import CryptoKit
import Foundation
@_exported import ScuSdk
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ScuError : Swift.String, Foundation.LocalizedError {
  case CommandNotSupported
  case ConnectionIsNotReady
  case CommandFailed
  case InvalidKey
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Scu {
  public static let shared: ScuSdk.Scu
  public var statusCommandDelegate: (any ScuSdk.ScuStatusCommandDelegate)?
  final public let version: Swift.String
  public var commandStatusCallback: ((ScuSdk.ScuCommand, Swift.Bool) -> Swift.Void)?
  public func connect(key: Swift.String) throws
  public func disconnect()
  public func bleConnectionStateDidChanged(to: @escaping (ScuSdk.BleConnectionState) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  public func command(type: ScuSdk.ScuCommand) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func startContinuousNotification(type: ScuSdk.ScuCommand) async throws
  #endif
  public func stopContinuousNotification(type: ScuSdk.ScuCommand)
  @objc deinit
}
public protocol ScuStatusCommandDelegate {
  func onBcmDoorChange(value: ScuSdk.BcmDoor)
  func onPlgmTrSwChange(value: ScuSdk.PlgmTrSw)
  func onBcmSunroofPosnChange(value: ScuSdk.BcmSunroofPosn)
}
public enum ScuCommand : Swift.CustomStringConvertible {
  case windowsAllOpen
  case windowsAllClose
  case windowTailgateActive
  case windowTailgateHalt
  case californiaModeToggle
  case tailgateActive
  case tailgateHalt
  case sunroofOpen
  case sunroofClose
  case vehicleLock
  case vehicleUnlock
  case vehicleStart
  case chargeGunUnlock
  public var description: Swift.String {
    get
  }
  public var value: Swift.UInt16 {
    get
  }
  public static func == (a: ScuSdk.ScuCommand, b: ScuSdk.ScuCommand) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ScuStatuses {
  case bcmDoor(ScuSdk.BcmDoor)
  case plgmTrSw(ScuSdk.PlgmTrSw)
  case bcmSunroofPosn(ScuSdk.BcmSunroofPosn)
}
public struct BcmDoor {
  public var readableName: Swift.String
  public var frontDoorsUnlocked: Swift.Bool
  public var driverFrontOpen: Swift.Bool
  public var passangerFrontOpen: Swift.Bool
  public var leftRearOpen: Swift.Bool
  public var rightRearOpen: Swift.Bool
}
public enum TrunkStatus : Swift.UInt8 {
  case none
  case closed
  case fullyOpen
  case halt
  case opening
  case closing
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct PlgmTrSw {
  public var readableName: Swift.String
  public var value: ScuSdk.TrunkStatus
}
public struct BcmSunroofPosn {
  public var readableName: Swift.String
  public var value: Swift.Int
}
public enum BleConnectionState : Swift.String, Swift.CustomStringConvertible {
  case NotFound
  case NotEnabled
  case Disconnected
  case Connected
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension ScuSdk.ScuError : Swift.Equatable {}
extension ScuSdk.ScuError : Swift.Hashable {}
extension ScuSdk.ScuError : Swift.RawRepresentable {}
extension ScuSdk.ScuCommand : Swift.Equatable {}
extension ScuSdk.ScuCommand : Swift.Hashable {}
extension ScuSdk.TrunkStatus : Swift.Equatable {}
extension ScuSdk.TrunkStatus : Swift.Hashable {}
extension ScuSdk.TrunkStatus : Swift.RawRepresentable {}
extension ScuSdk.BleConnectionState : Swift.Equatable {}
extension ScuSdk.BleConnectionState : Swift.Hashable {}
extension ScuSdk.BleConnectionState : Swift.RawRepresentable {}
